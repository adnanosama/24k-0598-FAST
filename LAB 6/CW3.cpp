#include <iostream>
#include <string> 
using namespace std;

class employee{
    string name;
    int ID;
    public:
    employee() {
        name = "";
        ID = 0;
    }
    employee(string n, int i) : name(n), ID(i) {}
    virtual string getName(){
        return name;
    }
    virtual int getID(){
        return ID;
    }
};
class IOrderTaker {
    public:
        virtual void takeOrder() = 0; // Pure virtual function
};
    
    // Abstract class for OrderPreparer (pure virtual class)
class IOrderPreparer {
    public:
        virtual void prepareOrder() = 0; // Pure virtual function
};
    
    // Abstract class for Biller (pure virtual class)
class IBiller {
    public:
        virtual void generateBill() = 0; // Pure virtual function
};

class waiter: public IOrderTaker, public employee{
    public:
        waiter(string n, int i): employee(n, i) {}
        
        void takeOrder() override {
            cout << "Order taken by " << getName() << endl;
        }
};

class chef: public IOrderPreparer, public employee{
    public:
        chef(string n, int i) : employee(n, i) {}
        
        void prepareOrder() override {
            cout << "Order prepared by " << getName() << endl;
        }
};

class cashier: public IBiller, public employee{
    public:
        cashier(string n, int i) : employee(n, i) {}
        
        void generateBill() override {
            cout << "Bill generated by " << getName() << endl;
        }
};

class Manager: public employee,public IOrderTaker,public IBiller{
    public:
        Manager(string n, int i) : employee(n, i) {}
        
        void takeOrder() override {
            cout << "Order taken by " << getName() << endl;
        }
        
        void generateBill() override {
            cout << "Bill generated by " << getName() << endl;
        }
};

class menu{
    public:
    virtual float calculatePrice() = 0;
};

class foodmenu: public menu{
    float price;
    public:
    foodmenu(float p) : price(p) {}
    float calculatePrice() override {
        return price;
    }

};

class beveragemenu: public menu{
    float price;
    float tax;
    public:
    beveragemenu(float p, float t) : price(p), tax(t) {}
    float calculatePrice() override {
        return price + (price * tax);
    }
};


int main(){
    waiter w("Ahmed", 1);
    chef c("Fatima", 2);
    cashier ca("Hassan", 3);
    Manager m("Aisha", 4);
    
    w.takeOrder();
    c.prepareOrder();
    ca.generateBill();
    m.takeOrder();
    m.generateBill();
    
    foodmenu f(10);
    beveragemenu b(5, 0.1);
    
    cout << "Food price: " << f.calculatePrice() << endl;
    cout << "Beverage price: " << b.calculatePrice() << endl;
    
    return 0;
}